"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/fs.ts
var fs_exports = {};
__export(fs_exports, {
  writeFileSafe: () => writeFileSafe
});
module.exports = __toCommonJS(fs_exports);
var import_node_path = require("path");
var import_node_fs = require("fs");
function writeFileSafe(path, data = "") {
  const directory = (0, import_node_path.dirname)(path);
  if (!(0, import_node_fs.existsSync)(directory))
    import_node_fs.promises.mkdir(directory, { recursive: true });
  return import_node_fs.promises.writeFile(path, data).then(() => true).catch(() => false);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  writeFileSafe
});
