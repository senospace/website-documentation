"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/core/postprocesser.ts
var postprocesser_exports = {};
__export(postprocesser_exports, {
  setMetadata: () => setMetadata
});
module.exports = __toCommonJS(postprocesser_exports);

// package.json
var package_default = {
  name: "html-export-pdf-cli",
  type: "module",
  version: "1.1.5",
  packageManager: "pnpm@8.8.0",
  description: "Render HTML to PDF(with outline) using Puppeteer.",
  author: "CondorHero",
  license: "MIT",
  homepage: "https://github.com/condorheroblog/html-export-pdf-cli#readme",
  repository: {
    type: "git",
    url: "git@github.com:condorheroblog/html-export-pdf-cli.git"
  },
  bugs: {
    url: "https://github.com/condorheroblog/html-export-pdf-cli/issues"
  },
  keywords: [
    "html-export-pdf-cli",
    "html-export-outline-pdf",
    "html-export-bookmark-pdf",
    "html-export-pdf",
    "html-to-pdf-cli",
    "bookmark-pdf",
    "outline-pdf",
    "html-to-pdf",
    "htmltopdf",
    "html2pdf",
    "pdf-cli"
  ],
  exports: {
    ".": {
      import: "./dist/index.js",
      require: "./dist/index.cjs"
    }
  },
  main: "dist/index.cjs",
  module: "dist/index.js",
  types: "dist/index.d.ts",
  typesVersions: {
    "*": {
      "*": [
        "./dist/*",
        "./dist/index.d.ts"
      ]
    }
  },
  bin: {
    "html-export-pdf-cli": "bin/html-export-pdf-cli.mjs"
  },
  files: [
    "dist",
    "bin"
  ],
  engines: {
    node: ">=18.12.0"
  },
  scripts: {
    prepublishOnly: "nr build",
    lint: "eslint .",
    "lint:fix": "eslint . --fix",
    dev: "jiti ./src/index.ts",
    coverage: "vitest run --coverage",
    test: "vitest",
    build: "tsup",
    "build:watch": "tsup --watch",
    typecheck: "tsc --noEmit",
    release: "bumpp -r && npm publish"
  },
  workspaces: [
    "examples/*"
  ],
  dependencies: {
    "cli-progress": "^3.12.0",
    commander: "^11.0.0",
    "fast-glob": "^3.3.1",
    "html-entities": "^2.4.0",
    "pdf-lib": "1.17.1",
    puppeteer: "^21.3.6"
  },
  devDependencies: {
    "@antfu/eslint-config-ts": "^0.43.1",
    "@types/cli-progress": "^3.11.3",
    "@types/node": "^20.7.1",
    bumpp: "^9.2.0",
    colorette: "^2.0.20",
    eslint: "^8.50.0",
    jiti: "^1.20.0",
    "lint-staged": "^14.0.1",
    "simple-git-hooks": "^2.9.0",
    tsup: "^7.2.0",
    typescript: "^5.2.2",
    vitest: "^0.34.5"
  },
  "simple-git-hooks": {
    "pre-commit": "npx lint-staged"
  },
  "lint-staged": {
    "*": "eslint --fix"
  },
  publishConfig: {
    access: "public",
    registry: "https://registry.npmjs.org"
  }
};

// src/core/postprocesser.ts
function setMetadata(pdfDoc, meta) {
  if (meta.keywords && typeof meta.keywords === "string")
    meta.keywords = meta.keywords.split(",");
  if (!meta.keywords)
    meta.keywords = [];
  if (!(meta.creationDate instanceof Date))
    meta.creationDate = /* @__PURE__ */ new Date();
  meta.modDate = /* @__PURE__ */ new Date();
  meta.metadataDate = /* @__PURE__ */ new Date();
  if (!meta.creator) {
    const creator = pdfDoc.getCreator();
    meta.creator = `${creator} + ${package_default.name}`;
  }
  if (!meta.producer) {
    const producer = pdfDoc.getProducer();
    meta.producer = producer;
  }
  if (meta.title)
    pdfDoc.setTitle(meta.title);
  if (meta.subject)
    pdfDoc.setSubject(meta.subject);
  if (Array.isArray(meta.keywords))
    pdfDoc.setKeywords(meta.keywords);
  if (meta.author)
    pdfDoc.setAuthor(meta.author);
  if (meta.creationDate)
    pdfDoc.setCreationDate(meta.creationDate);
  if (meta.modDate)
    pdfDoc.setModificationDate(meta.modDate);
  if (meta.creator)
    pdfDoc.setCreator(meta.creator);
  if (meta.producer)
    pdfDoc.setProducer(meta.producer);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setMetadata
});
